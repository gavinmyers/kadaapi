<?xml version="1.0" encoding="utf-8"?>
<mx:WindowedApplication modalTransparencyBlur="10" modalTransparencyDuration="500" 
	width="1" 
	height="1" 
	visible="false" 
	includeInLayout="false" 
	backgroundColor="0x000000" 
	backgroundAlpha="0" 
	creationComplete="init()" 
	showFlexChrome="false" 
	xmlns:mx="http://www.adobe.com/2006/mxml" 
	layout="absolute" 
	xmlns:windows="com.kpi.interfaces.windows.*">
	
<mx:Script>
	<![CDATA[
		import com.kpi.cairngorm.global.Global;
		import com.kpi.cairngorm.view.windows.Login;
		import mx.managers.PopUpManager;
		private function init():void {
			checkUpdate();
			Global.Instance().model.session.application = this;
			Global.Instance().model.session.version = "0.1.0";
			var sw:Login = new Login();
			sw.open(true);
		}
	]]>
</mx:Script>

<mx:Script>
    <![CDATA[
        import air.update.events.UpdateEvent;
        import mx.controls.Alert;
        import flash.events.ErrorEvent;
        import air.update.ApplicationUpdaterUI;

        /**
         * @var the object that that handles the update related actions
         */
        private var appUpdater:ApplicationUpdaterUI = new ApplicationUpdaterUI();

        /**
         * This function is triggered when the application finished to load;
         * Here we initialize <code>appUpdater</code> and set some properties
         */
        private function checkUpdate():void {
            setApplicationVersion();
            // we set the URL for the update.xml file
            appUpdater.updateURL = "http://www.gavinm.com/kadaapi";
            //we set the event handlers for INITIALIZED nad ERROR
            appUpdater.addEventListener(UpdateEvent.INITIALIZED, onUpdate);
            appUpdater.addEventListener(ErrorEvent.ERROR, onError);
            //we can hide the dialog asking for permission for checking for a new update;
            //if you want to see it just leave the default value (or set true).
            appUpdater.isCheckForUpdateVisible = false;
            //we initialize the updater
            appUpdater.initialize();
        }

        /**
         * Handler function triggered by the ApplicationUpdater.initialize;
         * The updater was initialized and it is ready to take commands
         * (such as <code>checkNow()</code>
         * @param UpdateEvent
         */
        private function onUpdate(event:UpdateEvent):void {
            //start the process of checking for a new update and to install
            appUpdater.checkNow();
        }

        /**
         * Handler function for error events triggered by the ApplicationUpdater.initialize
         * @param ErrorEvent
         */
        private function onError(event:ErrorEvent):void {
            Alert.show(event.toString());
        }

        /**
         * A simple code just to read the current version of the application
         * and display it in a label.
         */
        private function setApplicationVersion():void {
            var appXML:XML = NativeApplication.nativeApplication.applicationDescriptor;
            var ns:Namespace = appXML.namespace();
        }
    ]]>
</mx:Script>

<mx:Style source="assets/styles/skin.css"/>
<mx:Style source="assets/styles/style.css"/>


</mx:WindowedApplication>

